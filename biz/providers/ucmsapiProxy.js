// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

const TarsStream = require('@tars/stream');
const TarsError = require('@tars/rpc').error;
const Tarsclient = require('@tars/rpc').client;
const Tars = require('@tars/stream');
const path = require('path');
const env = process.env.NODE_ENV || 'development';
const { tracer } = require('../common/jaeger');
const config = require('../configs');

Tarsclient.initialize(path.join(__dirname, `../configs/${env}/config.conf`));

var Tarsapi = Tarsapi || {};

module.exports.Tarsapi = Tarsapi;

Tarsapi.SearchProxy = function() {
    this._name = undefined;
    this._worker = undefined;
};

Tarsapi.SearchProxy.prototype.setTimeout = function(iTimeout) {
    this._worker.timeout = iTimeout;
};

Tarsapi.SearchProxy.prototype.getTimeout = function() {
    return this._worker.timeout;
};

Tarsapi.KVProxy = function() {
    this._name = undefined;
    this._worker = undefined;
};

Tarsapi.KVProxy.prototype.setTimeout = function(iTimeout) {
    this._worker.timeout = iTimeout;
};

Tarsapi.KVProxy.prototype.getTimeout = function() {
    return this._worker.timeout;
};

Tarsapi.Result = function() {
    this.code = 0;
    this.msg = '';
    this.data = '';
    this._classname = 'Tarsapi.Result';
};
Tarsapi.Result._classname = 'Tarsapi.Result';

Tarsapi.Result._write = function(os, tag, value) {
    os.writeStruct(tag, value);
};
Tarsapi.Result._read = function(is, tag, def) {
    return is.readStruct(tag, true, def);
};
Tarsapi.Result._readFrom = function(is) {
    var tmp = new Tarsapi.Result();
    tmp.code = is.readInt32(0, true, 0);
    tmp.msg = is.readString(1, true, '');
    tmp.data = is.readString(2, false, '');
    return tmp;
};
Tarsapi.Result.prototype._writeTo = function(os) {
    os.writeInt32(0, this.code);
    os.writeString(1, this.msg);
    os.writeString(2, this.data);
};
Tarsapi.Result.prototype._equal = function(anItem) {
    assert(false, 'this structure not define key operation');
};
Tarsapi.Result.prototype._genKey = function() {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
};
Tarsapi.Result.prototype.toObject = function() {
    var tmp = {};

    tmp.code = this.code;
    tmp.msg = this.msg;
    tmp.data = this.data;

    return tmp;
};
Tarsapi.Result.prototype.readFromObject = function(json) {
    !json.hasOwnProperty('code') || (this.code = json.code);
    !json.hasOwnProperty('msg') || (this.msg = json.msg);
    !json.hasOwnProperty('data') || (this.data = json.data);
};
Tarsapi.Result.prototype.toBinBuffer = function() {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
Tarsapi.Result.new = function() {
    return new Tarsapi.Result();
};
Tarsapi.Result.create = function(is) {
    return Tarsapi.Result._readFrom(is);
};

Tarsapi.SearchProxy.prototype.del = function(id, newsTime) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        os.writeString(2, newsTime);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readStruct(0, true, Tarsapi.Result);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('del', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.SearchProxy.prototype.delData = function(indexName, type, id) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, indexName);
        os.writeString(2, type);
        os.writeString(3, id);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readStruct(0, true, Tarsapi.Result);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('delData', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.SearchProxy.prototype.getById = function(id) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getById', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.SearchProxy.prototype.getByIds = function(ids) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeList(1, ids);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getByIds', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.SearchProxy.prototype.list = function(
    searchPath,
    specialChannelPath,
    type,
    status,
    offset,
    size,
    sort,
    returnFields,
) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, searchPath);
        os.writeString(2, specialChannelPath);
        os.writeString(3, type);
        os.writeString(4, status);
        os.writeInt32(5, offset);
        os.writeInt32(6, size);
        os.writeString(7, sort);
        os.writeString(8, returnFields);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('list', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.SearchProxy.prototype.listByMap = function(queryMap, offset, size, sort, returnFields) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeMap(1, queryMap);
        os.writeInt32(2, offset);
        os.writeInt32(3, size);
        os.writeString(4, sort);
        os.writeString(5, returnFields);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('listByMap', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.SearchProxy.prototype.listByQueryStr = function(queryStr) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, queryStr);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('listByQueryStr', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.SearchProxy.prototype.put = function(id, dataJson, newsTime) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        os.writeString(2, dataJson);
        os.writeString(3, newsTime);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readStruct(0, true, Tarsapi.Result);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('put', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.SearchProxy.prototype.putData = function(indexName, type, id, dataJson) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, indexName);
        os.writeString(2, type);
        os.writeString(3, id);
        os.writeString(4, dataJson);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readStruct(0, true, Tarsapi.Result);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('putData', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.SearchProxy.prototype.update = function(id, dataJson, newsTime) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        os.writeString(2, dataJson);
        os.writeString(3, newsTime);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readStruct(0, true, Tarsapi.Result);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('update', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.SearchProxy.prototype.updateData = function(indexName, type, id, dataJson) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, indexName);
        os.writeString(2, type);
        os.writeString(3, id);
        os.writeString(4, dataJson);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readStruct(0, true, Tarsapi.Result);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('updateData', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.delAd = function(k) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('delAd', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.delCategory = function(id) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('delCategory', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.delCustom = function(k) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('delCustom', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.delDocument = function(id) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('delDocument', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.delDynamicFragments = function(id) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'delDynamicFragments',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.delOther = function(k) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('delOther', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.delRecommendFragment = function(id) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'delRecommendFragment',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.delSelectedPool = function(k) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('delSelectedPool', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.delSsiFragment = function(k) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('delSsiFragment', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.delStaticFragment = function(id) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'delStaticFragment',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.delStructuredFragment = function(id) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'delStructuredFragment',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.delVideo = function(id) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('delVideo', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.delWemediaAccount = function(k) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'delWemediaAccount',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getAd = function(k) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getAd', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getAds = function(ks) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeList(1, ks);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getAds', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getAll = function(idmap) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeMap(1, idmap);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(
                0,
                true,
                TarsStream.Map(TarsStream.String, TarsStream.Map(TarsStream.String, TarsStream.String)),
            );

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getAll', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getAllWithTracer = function(idmap, spanContext) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeMap(1, idmap);
        os.writeString(2, spanContext);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(
                0,
                true,
                TarsStream.Map(TarsStream.String, TarsStream.Map(TarsStream.String, TarsStream.String)),
            );

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getAllWithTracer', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getCategories = function(ids) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeList(1, ids);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getCategories', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getCategory = function(id) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getCategory', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getCustom = function(k) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getCustom', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getCustoms = function(ks) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeList(1, ks);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getCustoms', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getDocument = function(id) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getDocument', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getDocuments = function(ids) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeList(1, ids);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getDocuments', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getDynamicFragment = function(id) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'getDynamicFragment',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getDynamicFragments = function(ids) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeList(1, ids);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'getDynamicFragments',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getListByWemediaEAccountId = function(k) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'getListByWemediaEAccountId',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getListByWemediaEAccountIds = function(ks) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeList(1, ks);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'getListByWemediaEAccountIds',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getOther = function(k) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getOther', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getOthers = function(ks) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeList(1, ks);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getOthers', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getRecommendFragment = function(id) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'getRecommendFragment',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getRecommendFragments = function(ids) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeList(1, ids);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'getRecommendFragments',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getSelectedPool = function(k) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getSelectedPool', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getSelectedPools = function(ks) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeList(1, ks);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getSelectedPools', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getSsiFragment = function(k) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getSsiFragment', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getSsiFragments = function(ks) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeList(1, ks);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getSsiFragments', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getStaticFragment = function(id) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'getStaticFragment',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getStaticFragments = function(ids) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeList(1, ids);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'getStaticFragments',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getStructuredFragment = function(id) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'getStructuredFragment',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getStructuredFragments = function(ids) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeList(1, ids);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'getStructuredFragments',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getSublistByWemediaEAccountId = function(k, offset, size) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        os.writeInt32(2, offset);
        os.writeInt32(3, size);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'getSublistByWemediaEAccountId',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getSublistByWemediaEAccountIds = function(ks, offset, size) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeList(1, ks);
        os.writeInt32(2, offset);
        os.writeInt32(3, size);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'getSublistByWemediaEAccountIds',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getVideo = function(id) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readString(0, true, TarsStream.String);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getVideo', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.getVideos = function(ids) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeList(1, ids);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('getVideos', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.putAd = function(k, v) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        os.writeString(2, v);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('putAd', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.putCategory = function(id, v) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        os.writeString(2, v);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('putCategory', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.putCustom = function(k, v) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        os.writeString(2, v);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('putCustom', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.putDocument = function(id, v) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        os.writeString(2, v);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('putDocument', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.putDynamicFragments = function(id, v) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        os.writeString(2, v);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'putDynamicFragments',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.putOther = function(k, v) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        os.writeString(2, v);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('putOther', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.putRecommendFragment = function(id, v) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        os.writeString(2, v);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'putRecommendFragment',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.putSelectedPool = function(k, v) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        os.writeString(2, v);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('putSelectedPool', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.putSsiFragment = function(k, v) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        os.writeString(2, v);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('putSsiFragment', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.putStaticFragment = function(id, v) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        os.writeString(2, v);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'putStaticFragment',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.putStructuredFragment = function(id, v) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        os.writeString(2, v);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'putStructuredFragment',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.putVideo = function(id, v) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, id);
        os.writeString(2, v);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke('putVideo', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined)
        .then(_decode, _error);
};

Tarsapi.KVProxy.prototype.putWemediaAccount = function(k, v) {
    var _encode = function() {
        var os = new TarsStream.TarsOutputStream();
        os.writeString(1, k);
        os.writeString(2, v);
        return os.getBinBuffer();
    };

    var _decode = function(data) {
        try {
            var response = { arguments: {} };
            var is = new TarsStream.TarsInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return = is.readBoolean(0, true, TarsStream.Boolean);

            return { request: data.request, response: response };
        } catch (e) {
            var response = {};
            response.costtime = data.request.costtime;
            response.error = {};
            response.error.code = TarsError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request: data.request, response: response };
        }
    };

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error = data.error;

        throw { request: data.request, response: response };
    };

    return this._worker
        .tars_invoke(
            'putWemediaAccount',
            _encode(),
            arguments.length != 0 ? arguments[arguments.length - 1] : undefined,
        )
        .then(_decode, _error);
};

var KVProxy = Tarsclient.stringToProxy(Tarsapi.KVProxy, Tarsclient.configure.get('main.KVServer'));
var SearchProxy = Tarsclient.stringToProxy(Tarsapi.SearchProxy, Tarsclient.configure.get('main.SearchServer'));

exports.KVProxy = {};
exports.SearchProxy = {};
const KVTableEnum = config.common.KVProxy;
for (const key in KVProxy) {
    // console.log(key);
    exports.KVProxy[key] = function(ctx, ...args) {
        var child = !config.default.statisticsJaeger
            ? null
            : tracer.startSpan(`KVProxy.${key}(...args)`, { childOf: ctx.spanrpc || ctx.spanrouter || ctx.span });
        // if(ctx){
        //     ctx.rpcList.push({func:key,args:args})
        // }
        // console.log(key);
        // console.log(ctx.urlinfo);

        if (/^getAll.*/.test(key)) {
            let json = args.shift();
            for (let item of json) {
                let arr = item[0].split(':');
                ctx.kvList.push({ type: KVTableEnum[item[2]] || '', id: item[3], title: arr[1] || '', key: arr[0] });
            }
        } else if (/^get.*[^s]$/.test(key)) {
            ctx.kvList.push({ type: KVTableEnum[key] || '', id: args[0], title: '', desc: '' });
        } else if (/^get.*s$/.test(key)) {
            args = [getIds(ctx, key, args)];
        }

        return KVProxy[key](...args).then(
            function(data) {
                data.span = child;
                data.callInfo = `KVProxy.${key}(...args)`;
                return data;
            },
            function(error) {
                error.span = child;
                error.callInfo = `KVProxy.${key}(...args)`;
                console.log(error);
                return error;
            },
        );
    };
}

for (const key in SearchProxy) {
    exports.SearchProxy[key] = function(ctx, ...args) {
        var child = !config.default.statisticsJaeger
            ? null
            : tracer.startSpan(`SearchProxy.${key}(...args)`, { childOf: ctx.spanrpc || ctx.spanrouter || ctx.span });
        if (ctx) {
            ctx.rpcList.push({ func: key, args: args });
        }
        return SearchProxy[key](...args).then(
            function(data) {
                data.span = child;
                data.callInfo = `SearchProxy.${key}(...args)`;
                return data;
            },
            function(error) {
                error.span = child;
                error.callInfo = `SearchProxy.${key}(...args)`;
                console.log(error);
                return error;
            },
        );
    };
}

function getIds(ctx, key, arr) {
    const ids = new Tars.List(Tars.String);
    arr = [...new Set(arr)];
    for (const item of arr) {
        ids.push(item + '');
        ctx.kvList.push({ type: KVTableEnum[key] || '', id: item, title: '', desc: '' });
    }
    return ids;
}