﻿ // **********************************************************************
 // This file was generated by a TARS parser!
 // TARS version 1.0.1.
 // **********************************************************************

 const TarsStream = require('@tars/stream');
 const TarsError = require('@tars/rpc').error;
 const Tars = require("@tars/rpc").client;
 const path = require('path');
 const env = process.env.NODE_ENV || 'development';

 Tars.initialize(path.join(__dirname, `../configs/${env}/config.conf`));

 var Tarsapi = Tarsapi || {};

 Tarsapi.SearchProxy = function () {
     this._name = undefined;
     this._worker = undefined;
 }

 Tarsapi.SearchProxy.prototype.setTimeout = function (iTimeout) {
     this._worker.timeout = iTimeout;
 }

 Tarsapi.SearchProxy.prototype.getTimeout = function () {
     return this._worker.timeout;
 }

 Tarsapi.KVProxy = function () {
     this._name = undefined;
     this._worker = undefined;
 }

 Tarsapi.KVProxy.prototype.setTimeout = function (iTimeout) {
     this._worker.timeout = iTimeout;
 }

 Tarsapi.KVProxy.prototype.getTimeout = function () {
     return this._worker.timeout;
 }

 Tarsapi.RedisProxy = function () {
     this._name = undefined;
     this._worker = undefined;
 }

 Tarsapi.RedisProxy.prototype.setTimeout = function (iTimeout) {
     this._worker.timeout = iTimeout;
 }

 Tarsapi.RedisProxy.prototype.getTimeout = function () {
     return this._worker.timeout;
 }


 Tarsapi.Result = function () {
     this.code = 0;
     this.msg = "";
     this.data = "";
     this._classname = "Tarsapi.Result";
 };
 Tarsapi.Result._classname = "Tarsapi.Result";

 Tarsapi.Result._write = function (os, tag, value) {
     os.writeStruct(tag, value);
 }
 Tarsapi.Result._read = function (is, tag, def) {
     return is.readStruct(tag, true, def);
 }
 Tarsapi.Result._readFrom = function (is) {
     var tmp = new Tarsapi.Result();
     tmp.code = is.readInt32(0, true, 0);
     tmp.msg = is.readString(1, true, "");
     tmp.data = is.readString(2, false, "");
     return tmp;
 };
 Tarsapi.Result.prototype._writeTo = function (os) {
     os.writeInt32(0, this.code);
     os.writeString(1, this.msg);
     os.writeString(2, this.data);
 };
 Tarsapi.Result.prototype._equal = function (anItem) {
     assert(false, 'this structure not define key operation');
 }
 Tarsapi.Result.prototype._genKey = function () {
     if (!this._proto_struct_name_) {
         this._proto_struct_name_ = 'STRUCT' + Math.random();
     }
     return this._proto_struct_name_;
 }
 Tarsapi.Result.prototype.toObject = function () {
     var tmp = {};

     tmp.code = this.code;
     tmp.msg = this.msg;
     tmp.data = this.data;

     return tmp;
 }
 Tarsapi.Result.prototype.readFromObject = function (json) {
     !json.hasOwnProperty("code") || (this.code = json.code);
     !json.hasOwnProperty("msg") || (this.msg = json.msg);
     !json.hasOwnProperty("data") || (this.data = json.data);
 }
 Tarsapi.Result.prototype.toBinBuffer = function () {
     var os = new TarsStream.OutputStream();
     this._writeTo(os);
     return os.getBinBuffer();
 }
 Tarsapi.Result.new = function () {
     return new Tarsapi.Result();
 }
 Tarsapi.Result.create = function (is) {
     return Tarsapi.Result._readFrom(is);
 }

 Tarsapi.SearchProxy.prototype.del = function (id, newsTime) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt64(1, id);
         os.writeString(2, newsTime);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readStruct(0, true, Tarsapi.Result);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('del', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.SearchProxy.prototype.delData = function (indexName, type, id) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, indexName);
         os.writeString(2, type);
         os.writeInt64(3, id);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readStruct(0, true, Tarsapi.Result);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('delData', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.SearchProxy.prototype.getById = function (id) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt64(1, id);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getById', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.SearchProxy.prototype.getByIds = function (ids) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeList(1, ids);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readMap(0, true, TarsStream.Map(TarsStream.Int64, TarsStream.String));

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getByIds', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.SearchProxy.prototype.list = function (searchPath, specialChannelPath, type, status, offset, size, sort, returnFields) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, searchPath);
         os.writeString(2, specialChannelPath);
         os.writeString(3, type);
         os.writeString(4, status);
         os.writeInt32(5, offset);
         os.writeInt32(6, size);
         os.writeString(7, sort);
         os.writeString(8, returnFields);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('list', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.SearchProxy.prototype.listByQueryStr = function (queryStr) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, queryStr);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('listByQueryStr', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.SearchProxy.prototype.put = function (id, dataJson, newsTime) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt64(1, id);
         os.writeString(2, dataJson);
         os.writeString(3, newsTime);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readStruct(0, true, Tarsapi.Result);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('put', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.SearchProxy.prototype.putData = function (indexName, type, id, dataJson) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, indexName);
         os.writeString(2, type);
         os.writeInt64(3, id);
         os.writeString(4, dataJson);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readStruct(0, true, Tarsapi.Result);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('putData', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.SearchProxy.prototype.test = function (s) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, s);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('test', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.SearchProxy.prototype.update = function (id, dataJson, newsTime) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt64(1, id);
         os.writeString(2, dataJson);
         os.writeString(3, newsTime);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readStruct(0, true, Tarsapi.Result);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('update', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.SearchProxy.prototype.updateData = function (indexName, type, id, dataJson) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, indexName);
         os.writeString(2, type);
         os.writeInt64(3, id);
         os.writeString(4, dataJson);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readStruct(0, true, Tarsapi.Result);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('updateData', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }


 Tarsapi.KVProxy.prototype.del = function (enumValue, k) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt32(1, enumValue);
         os.writeString(2, k);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('del', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getAd = function (k) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getAd', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getAds = function (ks) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeList(1, ks);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getAds', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getCategories = function (ids) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeList(1, ids);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readMap(0, true, TarsStream.Map(TarsStream.Int32, TarsStream.String));

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getCategories', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getCategory = function (id) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt32(1, id);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getCategory', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getCustom = function (k) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getCustom', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getCustoms = function (ks) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeList(1, ks);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getCustoms', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getDocument = function (id) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt64(1, id);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getDocument', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getDocuments = function (ids) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeList(1, ids);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readMap(0, true, TarsStream.Map(TarsStream.Int64, TarsStream.String));

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getDocuments', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getRecommendFragment = function (id) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt32(1, id);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getRecommendFragment', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getRecommendFragments = function (ids) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeList(1, ids);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readMap(0, true, TarsStream.Map(TarsStream.Int32, TarsStream.String));

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getRecommendFragments', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getSsiFragment = function (k) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getSsiFragment', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getSsiFragments = function (ks) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeList(1, ks);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getSsiFragments', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getSsiFragment = function (k) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getSsiFragment', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getSsiFragments = function (ks) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeList(1, ks);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getSsiFragments', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getStaticFragment = function (id) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt32(1, id);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getStaticFragment', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getStaticFragments = function (ids) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeList(1, ids);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readMap(0, true, TarsStream.Map(TarsStream.Int32, TarsStream.String));

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getStaticFragments', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getStructuredFragment = function (id) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt32(1, id);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getStructuredFragment', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getStructuredFragments = function (ids) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeList(1, ids);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readMap(0, true, TarsStream.Map(TarsStream.Int32, TarsStream.String));

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getStructuredFragments', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getVideo = function (id) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt64(1, id);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getVideo', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.getVideos = function (ids) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeList(1, ids);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readMap(0, true, TarsStream.Map(TarsStream.Int64, TarsStream.String));

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getVideos', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.putAd = function (k, v) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         os.writeString(2, v);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('putAd', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.putCategory = function (id, v) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt32(1, id);
         os.writeString(2, v);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('putCategory', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.putCustom = function (k, v) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         os.writeString(2, v);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('putCustom', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.putDocument = function (id, v) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt64(1, id);
         os.writeString(2, v);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('putDocument', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.putRecommendFragment = function (id, v) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt32(1, id);
         os.writeString(2, v);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('putRecommendFragment', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.putSsiFragment = function (k, v) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         os.writeString(2, v);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('putSsiFragment', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.putSsiFragment = function (k, v) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         os.writeString(2, v);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('putSsiFragment', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.putStaticFragment = function (id, v) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt32(1, id);
         os.writeString(2, v);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('putStaticFragment', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.putStructuredFragment = function (id, v) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt32(1, id);
         os.writeString(2, v);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('putStructuredFragment', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.KVProxy.prototype.putVideo = function (id, v) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt64(1, id);
         os.writeString(2, v);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('putVideo', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }


 Tarsapi.RedisProxy.prototype.blpop = function (time, ks) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt32(1, time);
         os.writeList(2, ks);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readList(0, true, TarsStream.List(TarsStream.String));

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('blpop', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.RedisProxy.prototype.brpop = function (time, ks) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeInt32(1, time);
         os.writeList(2, ks);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readList(0, true, TarsStream.List(TarsStream.String));

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('brpop', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.RedisProxy.prototype.del = function (k) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('del', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.RedisProxy.prototype.expire = function (k, exp) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         os.writeInt32(2, exp);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('expire', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.RedisProxy.prototype.get = function (k) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('get', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.RedisProxy.prototype.getRange = function (k, startOffset, endOffset) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         os.writeInt32(2, startOffset);
         os.writeInt32(3, endOffset);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('getRange', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.RedisProxy.prototype.hgetAll = function (k) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readMap(0, true, TarsStream.Map(TarsStream.String, TarsStream.String));

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('hgetAll', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.RedisProxy.prototype.hmset = function (k, hash) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         os.writeMap(2, hash);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('hmset', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.RedisProxy.prototype.llen = function (k) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readInt64(0, true, TarsStream.Int64);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('llen', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.RedisProxy.prototype.lpop = function (k) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('lpop', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.RedisProxy.prototype.lpush = function (k, element) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         os.writeString(2, element);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readInt64(0, true, TarsStream.Int64);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('lpush', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.RedisProxy.prototype.rpop = function (k) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readString(0, true, TarsStream.String);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('rpop', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.RedisProxy.prototype.rpush = function (k, element) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         os.writeString(2, element);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readInt64(0, true, TarsStream.Int64);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('rpush', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.RedisProxy.prototype.set = function (k, v) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         os.writeString(2, v);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('set', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.RedisProxy.prototype.setex = function (k, v, exp) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         os.writeString(2, v);
         os.writeInt32(3, exp);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('setex', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 Tarsapi.RedisProxy.prototype.setnx = function (k, v) {
     var _encode = function () {
         var os = new TarsStream.OutputStream();
         os.writeString(1, k);
         os.writeString(2, v);
         return os.getBinBuffer();
     }

     var _decode = function (data) {
         try {
             var response = {
                 arguments: {}
             };
             var is = new TarsStream.InputStream(data.response.sBuffer);

             response.costtime = data.request.costtime;
             response.return = is.readBoolean(0, true, TarsStream.Boolean);

             return {
                 request: data.request,
                 response: response
             };
         } catch (e) {
             var response = {};
             response.costtime = data.request.costtime;
             response.error = {};
             response.error.code = TarsError.CLIENT.DECODE_ERROR;
             response.error.message = e.message;

             throw {
                 request: data.request,
                 response: response
             };
         }
     }

     var _error = function (data) {
         var response = {};
         response.costtime = data.request.costtime;
         response.error = data.error;

         throw {
             request: data.request,
             response: response
         };
     }

     return this._worker.tars_invoke('setnx', _encode(), arguments.length != 0 ? arguments[arguments.length - 1] : undefined).then(_decode, _error);
 }

 exports.KVProxy = Tars.stringToProxy(Tarsapi.KVProxy, Tars.configure.get("main.KVServer"));
 exports.SearchProxy = Tars.stringToProxy(Tarsapi.SearchProxy, Tars.configure.get("main.SearchServer"));
